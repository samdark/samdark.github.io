<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on Alexander Makarov</title>
    <link>https://samdark.github.io/tags/php/</link>
    <description>Recent content in Php on Alexander Makarov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 13 May 2017 00:59:27 +0300</lastBuildDate>
    
	<atom:link href="https://samdark.github.io/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hydrator</title>
      <link>https://samdark.github.io/blog/hydrator/</link>
      <pubDate>Sat, 13 May 2017 00:59:27 +0300</pubDate>
      
      <guid>https://samdark.github.io/blog/hydrator/</guid>
      <description>November 2016 I&amp;rsquo;ve implemented and released a Hydrator library but never properly announced it. As far as I know, the &amp;ldquo;hydrator&amp;rdquo; term was first used in Hibernate Java ORM. The job of a hydrator is to fill an object with data or extract data from an object without calling constructor or extra getter-setter methods. It allows you to directly work with private properties which should be persisted to database or loaded from database while not exposing these properties thus keeping public interface clean.</description>
    </item>
    
    <item>
      <title>Are traits evil?</title>
      <link>https://samdark.github.io/blog/are-traits-evil/</link>
      <pubDate>Mon, 17 Apr 2017 13:49:29 +0300</pubDate>
      
      <guid>https://samdark.github.io/blog/are-traits-evil/</guid>
      <description>When I have started a Patreon campaign, I have promised to answer questions. First question came from Daniel Fly and is about PHP traits:
 What do you think about Traits in PHP? Do you think they are evil and should avoid using them? If using them what are some common pitfalls fx where not to use them? Maybe you got some bad or good experience?
 What are traits?</description>
    </item>
    
    <item>
      <title>bcrypt hash</title>
      <link>https://samdark.github.io/blog/bcrypt-hash/</link>
      <pubDate>Thu, 23 Mar 2017 11:41:26 +0300</pubDate>
      
      <guid>https://samdark.github.io/blog/bcrypt-hash/</guid>
      <description>bcrypt is a good way to deal with password authentication. In PHP it is available via crypt with blowfish algorithm or a shortcut password_hash function current PHP versions are providing.
Yii framework project templates are using bcrypt for handling passwords. Framework components are providing polyfills ensuring bcrypt is used correctly.
bcrypt produces a compound hash that looks like the following:
$2y$13$YUUgrko03UmNU/fe6gNcO.Hka4lrdRlkq0iJ5d4bv4fK.sKS.6jXu
The string is always 60 characters long.
 2y indicates algorithm.</description>
    </item>
    
  </channel>
</rss>