<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Constants on Alexander Makarov</title>
    <link>https://samdark.github.io/tags/constants/index.xml</link>
    <description>Recent content in Constants on Alexander Makarov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://samdark.github.io/tags/constants/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Moving constants into dictionaries</title>
      <link>https://samdark.github.io/blog/moving-constants-into-dictionaries/</link>
      <pubDate>Fri, 02 Jun 2017 03:03:04 +0300</pubDate>
      
      <guid>https://samdark.github.io/blog/moving-constants-into-dictionaries/</guid>
      <description>&lt;p&gt;Extracting constants makes code much cleaner compared to using values directly. It eliminates typos and makes it possible
to use IDE autocomplete and refactoring.&lt;/p&gt;

&lt;p&gt;Typically, after extraction is done, it looks like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;namespace app\models;

class User
{
    const GENDER_FEMALE = &#39;female&#39;;
    const GENDER_MALE = &#39;male&#39;;
    
    public static function listGenders()
    {
        return [
            self::GENDER_FEMALE =&amp;gt; Yii::t(&#39;app&#39;, &#39;Female&#39;),
            self::GENDER_MALE =&amp;gt; Yii::t(&#39;app&#39;, &#39;Male&#39;),
        ];
    }
    
    public static function getGenderAsString($gender)
    {
        $all = self::listGenders();

        if (isset($all[$gender])) {
            return $all[$gender];
        }

        return Yii::t(&#39;app&#39;, &#39;Not set&#39;);
    }
    
    // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or another example from Stay.com project:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;namespace app\models;

class Guide
{
    const THEME_SHOPPING = 2;
    const THEME_ART_AND_CULTURE = 3;
    const THEME_AFTER_DARK = 4;
    const THEME_FAMILY = 5;
    const THEME_COFFEE = 8;
    const THEME_ON_A_BUDGET = 9;
    const THEME_FOOD = 10;
    const THEME_SPORTS_AND_OUTDOORS = 11;
    const THEME_24_HOURS = 12;
    
    public static function listThemes()
    {
        return [
            self::THEME_SHOPPING =&amp;gt; Yii::t(&#39;app&#39;, &#39;Shopping&#39;),
            // ...
        ];
    }
    
    public static function getThemeAsString($theme)
    {
        $all = self::listThemes();

        if (isset($all[$theme])) {
            return $all[$theme];
        }

        return Yii::t(&#39;app&#39;, &#39;Not set&#39;);
    }
    
    // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is more or less OK but some issues are still there:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It bloats the class.&lt;/li&gt;
&lt;li&gt;Constants could not be reused in different context.&lt;/li&gt;
&lt;li&gt;It creates unnecessary dependency when used with different classes such as form models.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In both examples above it&amp;rsquo;s possible to extract constants into its own class. User case:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;namespace app\dictionaries;

abstract class Gender
{
    const FEMALE = 0;
    const MALE = 1;

    public static function all()
    {
        return [
            self::MALE =&amp;gt; Yii::t(&#39;app&#39;, &#39;Male&#39;),
            self::FEMALE =&amp;gt; Yii::t(&#39;app&#39;, &#39;Female&#39;),
        ];
    }
    
    public static function get($gender)
    {
        $all = self::all();

        if (isset($all[$gender])) {
            return $all[$gender];
        }

        return Yii::t(&#39;app&#39;, &#39;Not set&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stay.com case:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;namespace app\dictionaries;

abstract class GuideTheme
{
    const SHOPPING = 2;
    const ART_AND_CULTURE = 3;
    const AFTER_DARK = 4;
    const FAMILY = 5;
    const COFFEE = 8;
    const ON_A_BUDGET = 9;
    const FOOD = 10;
    const SPORTS_AND_OUTDOORS = 11;
    const 24_HOURS = 12;
    
    public static function all()
    {
        return [
            self::SHOPPING =&amp;gt; Yii::t(&#39;app&#39;, &#39;Shopping&#39;),
            // ...
        ];
    }
    
    public static function get($theme)
    {
        $all = self::all();

        if (isset($all[$theme])) {
            return $all[$theme];
        }

        return Yii::t(&#39;app&#39;, &#39;Not set&#39;);
    }    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In both cases, additionally to solving issues listed above, it looks either equally good or better than originally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user-&amp;gt;gender = Gender::MALE;
// instead of
$user-&amp;gt;gender = User::GENDER_MALE;


$guide-&amp;gt;theme = GuideTheme::COFFEE;
// instead of
$guide-&amp;gt;theme = Guide::THEME_COFFEE;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>