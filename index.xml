<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alexander Makarov</title>
    <link>https://samdark.github.io/index.xml</link>
    <description>Recent content on Alexander Makarov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 09 Mar 2017 12:39:18 +0300</lastBuildDate>
    <atom:link href="https://samdark.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Yii 2.0 Logging and PSR-3</title>
      <link>https://samdark.github.io/blog/yii-2.0-logging-and-psr-3/</link>
      <pubDate>Thu, 09 Mar 2017 12:39:18 +0300</pubDate>
      
      <guid>https://samdark.github.io/blog/yii-2.0-logging-and-psr-3/</guid>
      <description>

&lt;p&gt;It is 2017 and major parts of PHP community are all talking about &lt;a href=&#34;http://www.php-fig.org/psr/&#34;&gt;PSRs: PHP standard recommendations&lt;/a&gt;
that aim is to make parts of frameworks reusable. The recommendation PSR-3 is about logging. Many logging libraries are
following this recommendation, among which &lt;a href=&#34;https://github.com/Seldaek/monolog&#34;&gt;Monolog&lt;/a&gt; is the most widely used one.&lt;/p&gt;

&lt;p&gt;There are three questions commonly asked about Yii 2.0 with regards to PSR-3:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Why isn&amp;rsquo;t Yii 2.0 PSR-3 compatible?&lt;/li&gt;
&lt;li&gt;How do I use PSR-3 compatible logger in Yii 2.0?&lt;/li&gt;
&lt;li&gt;Is there a plan to extract a standalone PSR-3 compatible logging library from Yii 2.0?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s answer these.&lt;/p&gt;

&lt;h2 id=&#34;why-isn-t-yii-2-0-psr-3-compatible&#34;&gt;Why isn&amp;rsquo;t Yii 2.0 PSR-3 compatible?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html&#34;&gt;Yii 2.0 logger&lt;/a&gt; is one of the well done parts of
the framework. It&amp;rsquo;s stable, easy to extend, performant and really powerful when it comes to features. It was
implemented at early stages of yet secret pre-alpha development of the framework and was not changed much since then.
The design is very close to what was done in Yii 1.0 so we can think of 2008 as the year when logger design formed.&lt;/p&gt;

&lt;p&gt;The year is important because it&amp;rsquo;s way before PHP-FIG group which is responsible for designing PSRs formed. At the time
Yii 2.0 was in alpha stage we had a proven logger design with worked well with Yii 1.0 and Yii 1.1 and PSR-3 wasn&amp;rsquo;t
a thing yet: there were nothing special about loggers implementing it and there was no benefits for Yii framework
adopting it. So then we decided not to.&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s time to re-decide it for 2.1 since there are certain pros in being PSR-3 compatible.&lt;/p&gt;

&lt;h2 id=&#34;how-do-i-use-psr-3-compatible-logger-in-yii-2-0&#34;&gt;How do I use PSR-3 compatible logger in Yii 2.0?&lt;/h2&gt;

&lt;p&gt;Yii&amp;rsquo;s logging facility is quite flexible. There&amp;rsquo;s a central dispatcher component which is collecting log messages and
then flushes them to individual &lt;a href=&#34;http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html#log-targets&#34;&gt;log targets&lt;/a&gt;,
such as file target or email target that actually do the job.&lt;/p&gt;

&lt;p&gt;Yii&amp;rsquo;s log targets are easy to extend but considering the popularity of PSR-3 and especially
&lt;a href=&#34;https://github.com/Seldaek/monolog&#34;&gt;Monolog&lt;/a&gt; it is tempting to reuse what&amp;rsquo;s already done. For example, to send logs
to a Slack chat.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve put together &lt;a href=&#34;https://github.com/samdark/yii2-psr-log-target&#34;&gt;an extension&lt;/a&gt; which allows you to use any PSR-3
compatible logger as Yii log target.&lt;/p&gt;

&lt;p&gt;What is does it translating Yii&amp;rsquo;s log levels to alike PSR-3 log levels and actually forwarding logs to PSR-3 compatible
logger configured. Configuration is fairly easy, you can find it &lt;a href=&#34;https://github.com/samdark/yii2-psr-log-target&#34;&gt;at extension page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;is-there-a-plan-to-extract-a-standalone-psr-3-compatible-logging-library-from-yii-2-0&#34;&gt;Is there a plan to extract a standalone PSR-3 compatible logging library from Yii 2.0?&lt;/h2&gt;

&lt;p&gt;Yii was never meant to be a set of standalone libraries. Independent components are nice but there is a cost of not
reusing what&amp;rsquo;s available in the framework which in some case may result in bloated code and too abstract solutions.&lt;/p&gt;

&lt;p&gt;Logger may be an exception since it&amp;rsquo;s not relying on the framework much, it&amp;rsquo;s framework that relies on it. An attempt
to extract logger may succeed and since we have a good design it may even become close in popularity to Monolog. So
overall it is worth trying and, I think, I&amp;rsquo;ll work on it if &lt;a href=&#34;https://www.patreon.com/samdark&#34;&gt;Patreon campaign&lt;/a&gt;
will bring me enough time for it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>No Kipple Please</title>
      <link>https://samdark.github.io/blog/no-kipple-please/</link>
      <pubDate>Sun, 05 Mar 2017 21:52:28 +0300</pubDate>
      
      <guid>https://samdark.github.io/blog/no-kipple-please/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Kipple is useless objects, like junk mail or match folders after you use the last match or gum wrappers or yesterday&amp;rsquo;s
homeopape. When nobody&amp;rsquo;s around, kipple reproduces itself. For instance, if you go to bed leaving any kipple around
your apartment, when you wake up the next morning there&amp;rsquo;s twice as much of it. It always gets more and more.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;There&amp;rsquo;s the First Law of Kipple,&amp;rdquo; he said. &amp;ldquo;Kipple drives out nonkipple.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Do Androids Dream of Electric Sheep? by Philip K. Dick&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;IT projects are much like the apartments mentioned in Philip K. Dick novel. They tend
to have kipple and, as with apartments, it grows every day.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://samdark.github.io/img/posts/kipple.png&#34; width=&#34;50%&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve reviewed many projects and one mistake that I often see is about kipple. It looks
minor compared to bugs or architectural issues but at the same time it affects both
project and development team significantly.&lt;/p&gt;

&lt;p&gt;So kipple exists. Usually it&amp;rsquo;s cryptic unneeded stuff that one hesitates to delete and
it is for quite vague illogical reasons. Examples of kipple is software projects include:
commented out code, files like &lt;code&gt;main.css_old&lt;/code&gt;, unused methods, five different versions of jQuery,
code comments like &lt;code&gt;// TODO:&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s why kipple is both useless and problematic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Broken_windows_theory&#34;&gt;Broken Windows Theory&lt;/a&gt; applies
well to software projects. If it&amp;rsquo;s allowed not to clean up it&amp;rsquo;s OK to write code that is
of doubtful quality.&lt;/li&gt;
&lt;li&gt;Often developers comment out big chunks of CSS, JavaScript and HTML that are still
served to the end user, thus slowing page loading speed.&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;re actually reading commented out parts of code, and it takes time.&lt;/li&gt;
&lt;li&gt;Large number of unused files can confuse newcomers.&lt;/li&gt;
&lt;li&gt;It is unpleasant to work with such &amp;ldquo;kippled&amp;rdquo; project. It can feel like the
code is of a bad quality even if architecture and code itself is sound.&lt;/li&gt;
&lt;li&gt;Compile time may be increased.&lt;/li&gt;
&lt;li&gt;Any version control system remembers everything you&amp;rsquo;ll delete. If there&amp;rsquo;s a need
you can always get it from there. If you fail to remember where it was,
you can tag the commit.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know that you may say that it&amp;rsquo;s not important and there&amp;rsquo;s no time for it but I highly
recommend trying it for a few months. You&amp;rsquo;ll notice improvements in both the project and
overall quality of the code your team produce.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://samdark.github.io/about/</link>
      <pubDate>Sun, 05 Mar 2017 16:11:58 +0530</pubDate>
      
      <guid>https://samdark.github.io/about/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m Alex, one of the core maintainers of &lt;a href=&#34;http://www.yiiframework.com/&#34;&gt;Yii PHP framework&lt;/a&gt;
for more than 7 years, its representative in &lt;a href=&#34;http://www.php-fig.org/&#34;&gt;PHP-FIG&lt;/a&gt;,
&lt;a href=&#34;http://slides.rmcreative.ru/&#34;&gt;active conference speaker&lt;/a&gt; and &lt;a href=&#34;https://github.com/samdark/&#34;&gt;participant of various other
OpenSource projects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am &lt;a href=&#34;http://rmcreative.ru/&#34;&gt;blogging in Russian since 2005&lt;/a&gt; and recently decided
that it is time to write in English as well.&lt;/p&gt;

&lt;h2 id=&#34;seeking-for-patronage&#34;&gt;Seeking for patronage&lt;/h2&gt;

&lt;p&gt;I am &lt;a href=&#34;https://www.patreon.com/samdark&#34;&gt;seeking for patronage&lt;/a&gt; in order to work on Yii framework and other OpenSource software.
Would really appreciate if you will support me.&lt;/p&gt;

&lt;h2 id=&#34;available-for-hire&#34;&gt;Available for Hire&lt;/h2&gt;

&lt;p&gt;I am available for hire to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code Reviews (basic security, Yii usage, cleanness, possible bugs etc.).&lt;/li&gt;
&lt;li&gt;Consulting (both Yii-related and not).&lt;/li&gt;
&lt;li&gt;Training and instruction.&lt;/li&gt;
&lt;li&gt;Public speaking.&lt;/li&gt;
&lt;li&gt;Technical writing.&lt;/li&gt;
&lt;li&gt;System design.&lt;/li&gt;
&lt;li&gt;Code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Availablity is subject to change. Rate depends on type of the project and specifics. Average is
about $100/hr. I do give discounts and even may consider doing it for free for non-profits and OpenSource.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re interested in my experience, check out &lt;a href=&#34;https://www.linkedin.com/in/makarov/&#34;&gt;my LinkedIn page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions, &lt;a href=&#34;mailto:sam@rmcreative.ru&#34;&gt;email me at sam@rmcreative.ru&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding Bug with Binary Search</title>
      <link>https://samdark.github.io/blog/finding-bug-with-binary-search/</link>
      <pubDate>Sat, 04 Mar 2017 21:52:28 +0300</pubDate>
      
      <guid>https://samdark.github.io/blog/finding-bug-with-binary-search/</guid>
      <description>&lt;p&gt;Once there&amp;rsquo;s a way to reproduce the issue we need to find code which caused it. Sometimes we are totally stuck
for day feeling more and more depressed and, in the end, unable to think clearly. Luckily, there&amp;rsquo;s a systematic approach
to find bug even if you have no idea what caused it and even where to set a breakpoint for proper debugging.
This approach is known as binary search.&lt;/p&gt;

&lt;p&gt;If your code is under version control, firstly you check out a fairly old commit and see if it works. If it does work
then you check out a commit that is in the middle between the commit that works and the commit which did not and check
again. When there are no commits remaining in between the working and non-working commits, you arrived at the commit
that broke it. If you&amp;rsquo;re using git, you&amp;rsquo;re lucky since git has built-in tool &lt;code&gt;git bisect&lt;/code&gt; that will help with this
process. It is quite simple. Let&amp;rsquo;s say you&amp;rsquo;re on current &lt;code&gt;master&lt;/code&gt; commit and you have a bug.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git bisect # starts the process
git bisect bad # current commit has a bug
git bisect good 3.4.5 # I remember that commit tagged 3.4.5 was OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that, git informs you with something like &lt;code&gt;Bisecting: 10 revisions left to test after this&lt;/code&gt;, which means
there are about 10 commits between good and bad revisions. Also it is checking out a commit which is in
the middle of these ten.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://samdark.github.io/img/posts/binary_search.png&#34; width=&#34;50%&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now, it&amp;rsquo;s your job to confirm if the bug is still present or otherwise. If yes, you issue
&lt;code&gt;git bisect bad&lt;/code&gt;. If not &amp;mdash; &lt;code&gt;git bisect good&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;git will choose either left or right part of these 10 commits and repeat the process.&lt;/p&gt;

&lt;p&gt;After a few checks, you&amp;rsquo;ll get, for example, &lt;code&gt;1029012930192390 is first bad commit&lt;/code&gt; message.
If you confirmed the presence of the bug correctly, this indicates the exact commit that introduced the issue.&lt;/p&gt;

&lt;p&gt;When everything is done you execute &lt;code&gt;git bisect reset&lt;/code&gt; to end the process.&lt;/p&gt;

&lt;p&gt;Similarly, the binary search approach could be done with HTML markup of a single page when it&amp;rsquo;s not under version control.
If you have a weird bug, delete half of the HTML page code and see if issue is still present.
If it is, then divide that HTML and check parts again. If it&amp;rsquo;s not then take other half for inspection.&lt;/p&gt;

&lt;p&gt;The advantage is that you&amp;rsquo;ll certainly find what caused the bug for certain. However, it is a slow process when
you&amp;rsquo;re not using a tool like git bisect.&lt;/p&gt;

&lt;p&gt;The same methodology can be applied to anything. For example, this process widely used in electronics.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The History of Yii Framework</title>
      <link>https://samdark.github.io/blog/the-history-of-yii-framework/</link>
      <pubDate>Sat, 04 Mar 2017 21:52:28 +0300</pubDate>
      
      <guid>https://samdark.github.io/blog/the-history-of-yii-framework/</guid>
      <description>

&lt;p&gt;Yii is one of the long-living PHP frameworks out there that is constantly evolving with time
as PHP is enhanced more and more. It&amp;rsquo;s interesting explore the history of Yii.&lt;/p&gt;

&lt;h2 id=&#34;prado&#34;&gt;Prado&lt;/h2&gt;

&lt;p&gt;In June 2004, Qiang Xue released the first version of PRADO framework. Prado was inspired
by Apache Tapestry, Borland Delphi and Microsoft ASP.NET.&lt;/p&gt;

&lt;p&gt;Roughly at the same time, Zend conducted a competition called &amp;ldquo;gophp5&amp;rdquo; to promote
the newly released PHP 5.0. Qiang re-implemented Prado to PHP 5 and it won the
competition.&lt;/p&gt;

&lt;p&gt;At the time, the project was hosted on SourceForge. In the mid-2005, Wei Zhuo joined
and helped to add i18n and l10n. Prado 2.0 was released.&lt;/p&gt;

&lt;p&gt;In May 2005, Prado was again rewritten to include new features inspired
by Microsoft ASP.NET 2.0. In April 2006, version 3.0 was released. Since
then then Prado team has mostly focused on code quality and stability.&lt;/p&gt;

&lt;p&gt;PRADO is still alive and used.&lt;/p&gt;

&lt;h2 id=&#34;yii&#34;&gt;Yii&lt;/h2&gt;

&lt;p&gt;In October 2006, Qiang announced an alpha version of Yii at the PRADO forums.&lt;/p&gt;

&lt;p&gt;On the 3rd of December 2008, Yii version 1.0.0 was released. Many ideas and some code were taken
from PRADO, including: ActiveRecord, i18n, l10n, etc. Yii also drew more inspirations from
RoR (convention over configuration, some AR features), symfony1 (filters,
plugins) and Joomla (modules, message translation).&lt;/p&gt;

&lt;p&gt;Yii 1.0.0 was significantly faster than other frameworks of similar functionality,
so community grew fast.&lt;/p&gt;

&lt;p&gt;In January 2010, Yii 1.1 was released. It included new features such as form builder,
relational queries in AR, ready to use unit-testing framework and more.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve joined Yii team in 2010. By the end of the year, we were discussing Yii 1.2
while developing version 1.1. In May 2011, the Yii team decided to use a newer PHP versions
and address legacy architectural challenges. That is, to start work on new major version 2.0.
The first commits were on a private intenal repository.&lt;/p&gt;

&lt;p&gt;In May 2013, Yii 2.0 and its source code was presented to public. In October 2014, the first stable
version we released.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>